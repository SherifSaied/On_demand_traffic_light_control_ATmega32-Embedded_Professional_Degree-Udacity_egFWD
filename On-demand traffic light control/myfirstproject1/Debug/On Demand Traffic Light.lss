
On Demand Traffic Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000996  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000009ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000009ea  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a1c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  00000a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f53  00000000  00000000  00000b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000843  00000000  00000000  00001abb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000082b  00000000  00000000  000022fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f0  00000000  00000000  00002b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000501  00000000  00000000  00002d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005d5  00000000  00000000  0000321d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  000037f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 91 00 	jmp	0x122	; 0x122 <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <main>
  64:	0c 94 c9 04 	jmp	0x992	; 0x992 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <APP_init>:
 */ 
#include "App.h"
void APP_init()
{
	//car led initialization
	LED_init(LED_carport, LED_car_Gpin);
  6c:	60 e0       	ldi	r22, 0x00	; 0
  6e:	81 e4       	ldi	r24, 0x41	; 65
  70:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LED_init>
	LED_init(LED_carport, LED_car_Ypin);
  74:	61 e0       	ldi	r22, 0x01	; 1
  76:	81 e4       	ldi	r24, 0x41	; 65
  78:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LED_init>
	LED_init(LED_carport, LED_car_Rpin);
  7c:	62 e0       	ldi	r22, 0x02	; 2
  7e:	81 e4       	ldi	r24, 0x41	; 65
  80:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LED_init>
	//pedestrian led initialization
	LED_init(LED_pedestrianport, LED_ped_Gpin);
  84:	60 e0       	ldi	r22, 0x00	; 0
  86:	82 e4       	ldi	r24, 0x42	; 66
  88:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LED_init>
	LED_init(LED_pedestrianport, LED_ped_Ypin);
  8c:	61 e0       	ldi	r22, 0x01	; 1
  8e:	82 e4       	ldi	r24, 0x42	; 66
  90:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LED_init>
	LED_init(LED_pedestrianport, LED_ped_Rpin);
  94:	62 e0       	ldi	r22, 0x02	; 2
  96:	82 e4       	ldi	r24, 0x42	; 66
  98:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LED_init>
	//button initialization
	BUTTON_init(BUTTON_port, BUTTON_pin);
  9c:	62 e0       	ldi	r22, 0x02	; 2
  9e:	84 e4       	ldi	r24, 0x44	; 68
  a0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <BUTTON_init>
	//timer initialization
	TIMER_init();
  a4:	0e 94 1a 02 	call	0x434	; 0x434 <TIMER_init>
	//enable global interrupt and rising edge detection
	sei();
  a8:	78 94       	sei
	RISING_EDGE_SETUP();
  aa:	85 b7       	in	r24, 0x35	; 53
  ac:	83 60       	ori	r24, 0x03	; 3
  ae:	85 bf       	out	0x35, r24	; 53
	SETUP_INT0();
  b0:	8b b7       	in	r24, 0x3b	; 59
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	8b bf       	out	0x3b, r24	; 59
  b6:	08 95       	ret

000000b8 <APP_start>:
}

void APP_start(void)
{

	LED_on(LED_carport,LED_car_Gpin);
  b8:	60 e0       	ldi	r22, 0x00	; 0
  ba:	81 e4       	ldi	r24, 0x41	; 65
  bc:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LED_on>
	LED_off(LED_carport,LED_car_Ypin);
  c0:	61 e0       	ldi	r22, 0x01	; 1
  c2:	81 e4       	ldi	r24, 0x41	; 65
  c4:	0e 94 df 00 	call	0x1be	; 0x1be <LED_off>
	LED_off(LED_carport,LED_car_Rpin);
  c8:	62 e0       	ldi	r22, 0x02	; 2
  ca:	81 e4       	ldi	r24, 0x41	; 65
  cc:	0e 94 df 00 	call	0x1be	; 0x1be <LED_off>
	LED_off(LED_pedestrianport,LED_ped_Rpin);
  d0:	62 e0       	ldi	r22, 0x02	; 2
  d2:	82 e4       	ldi	r24, 0x42	; 66
  d4:	0e 94 df 00 	call	0x1be	; 0x1be <LED_off>
	LED_off(LED_pedestrianport,LED_ped_Gpin);
  d8:	60 e0       	ldi	r22, 0x00	; 0
  da:	82 e4       	ldi	r24, 0x42	; 66
  dc:	0e 94 df 00 	call	0x1be	; 0x1be <LED_off>
	LED_off(LED_pedestrianport,LED_ped_Ypin);
  e0:	61 e0       	ldi	r22, 0x01	; 1
  e2:	82 e4       	ldi	r24, 0x42	; 66
  e4:	0e 94 df 00 	call	0x1be	; 0x1be <LED_off>

	TIMER_delay(400);
  e8:	80 e9       	ldi	r24, 0x90	; 144
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	0e 94 1d 02 	call	0x43a	; 0x43a <TIMER_delay>

	LED_on(LED_carport,LED_car_Ypin);
  f0:	61 e0       	ldi	r22, 0x01	; 1
  f2:	81 e4       	ldi	r24, 0x41	; 65
  f4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LED_on>
	LED_off(LED_carport,LED_car_Gpin);
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	81 e4       	ldi	r24, 0x41	; 65
  fc:	0e 94 df 00 	call	0x1be	; 0x1be <LED_off>


	TIMER_delay(400);
 100:	80 e9       	ldi	r24, 0x90	; 144
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	0e 94 1d 02 	call	0x43a	; 0x43a <TIMER_delay>
	/*LED_off(LED_carport,LED_car_Ypin);
	TIMER_delay(1000);
	LED_on(LED_carport,LED_car_Ypin);
	TIMER_delay(1000);*/
	LED_off(LED_carport,LED_car_Ypin);
 108:	61 e0       	ldi	r22, 0x01	; 1
 10a:	81 e4       	ldi	r24, 0x41	; 65
 10c:	0e 94 df 00 	call	0x1be	; 0x1be <LED_off>

	//TIMER_delay(3000);

	LED_on(LED_carport,LED_car_Rpin);
 110:	62 e0       	ldi	r22, 0x02	; 2
 112:	81 e4       	ldi	r24, 0x41	; 65
 114:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LED_on>

	TIMER_delay(400);
 118:	80 e9       	ldi	r24, 0x90	; 144
 11a:	91 e0       	ldi	r25, 0x01	; 1
 11c:	0e 94 1d 02 	call	0x43a	; 0x43a <TIMER_delay>
 120:	08 95       	ret

00000122 <__vector_1>:

}

ISR(EXT_INT_0)
{
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	2f 93       	push	r18
 12e:	3f 93       	push	r19
 130:	4f 93       	push	r20
 132:	5f 93       	push	r21
 134:	6f 93       	push	r22
 136:	7f 93       	push	r23
 138:	8f 93       	push	r24
 13a:	9f 93       	push	r25
 13c:	af 93       	push	r26
 13e:	bf 93       	push	r27
 140:	ef 93       	push	r30
 142:	ff 93       	push	r31
	if (((LED_carport & (1<<LED_car_Gpin))>>LED_car_Gpin) == HIGH)
	{
		LED_toggle(LED_pedestrianport,LED_ped_Ypin);
 144:	61 e0       	ldi	r22, 0x01	; 1
 146:	82 e4       	ldi	r24, 0x42	; 66
 148:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LED_toggle>
		TIMER_delay(3000);
 14c:	88 eb       	ldi	r24, 0xB8	; 184
 14e:	9b e0       	ldi	r25, 0x0B	; 11
 150:	0e 94 1d 02 	call	0x43a	; 0x43a <TIMER_delay>
		LED_off(LED_carport,LED_car_Gpin);
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	81 e4       	ldi	r24, 0x41	; 65
 158:	0e 94 df 00 	call	0x1be	; 0x1be <LED_off>
		LED_on(LED_carport,LED_car_Rpin);
 15c:	62 e0       	ldi	r22, 0x02	; 2
 15e:	81 e4       	ldi	r24, 0x41	; 65
 160:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LED_on>
		LED_on(LED_pedestrianport,LED_ped_Gpin);
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	82 e4       	ldi	r24, 0x42	; 66
 168:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LED_on>
		LED_off(LED_pedestrianport,LED_ped_Ypin);
 16c:	61 e0       	ldi	r22, 0x01	; 1
 16e:	82 e4       	ldi	r24, 0x42	; 66
 170:	0e 94 df 00 	call	0x1be	; 0x1be <LED_off>
		TIMER_delay(3000);	
 174:	88 eb       	ldi	r24, 0xB8	; 184
 176:	9b e0       	ldi	r25, 0x0B	; 11
 178:	0e 94 1d 02 	call	0x43a	; 0x43a <TIMER_delay>
		LED_off(LED_carport,LED_car_Rpin);
 17c:	62 e0       	ldi	r22, 0x02	; 2
 17e:	81 e4       	ldi	r24, 0x41	; 65
 180:	0e 94 df 00 	call	0x1be	; 0x1be <LED_off>
		LED_off(LED_pedestrianport,LED_ped_Gpin);
 184:	60 e0       	ldi	r22, 0x00	; 0
 186:	82 e4       	ldi	r24, 0x42	; 66
 188:	0e 94 df 00 	call	0x1be	; 0x1be <LED_off>
		
			
		
	}

}
 18c:	ff 91       	pop	r31
 18e:	ef 91       	pop	r30
 190:	bf 91       	pop	r27
 192:	af 91       	pop	r26
 194:	9f 91       	pop	r25
 196:	8f 91       	pop	r24
 198:	7f 91       	pop	r23
 19a:	6f 91       	pop	r22
 19c:	5f 91       	pop	r21
 19e:	4f 91       	pop	r20
 1a0:	3f 91       	pop	r19
 1a2:	2f 91       	pop	r18
 1a4:	0f 90       	pop	r0
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	0f 90       	pop	r0
 1aa:	1f 90       	pop	r1
 1ac:	18 95       	reti

000001ae <LED_init>:
 */ 
#include "led.h"

void LED_init(uint8_t ledport, uint8_t ledpin)
{
	DIO_init(ledport, ledpin, OUT);
 1ae:	41 e0       	ldi	r20, 0x01	; 1
 1b0:	0e 94 ef 00 	call	0x1de	; 0x1de <DIO_init>
 1b4:	08 95       	ret

000001b6 <LED_on>:
}
void LED_on(uint8_t ledport, uint8_t ledpin) 
{
	DIO_write(ledport, ledpin, HIGH);
 1b6:	41 e0       	ldi	r20, 0x01	; 1
 1b8:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DIO_write>
 1bc:	08 95       	ret

000001be <LED_off>:
}

void LED_off(uint8_t ledport, uint8_t ledpin) 
{
	DIO_write(ledport, ledpin, LOW);
 1be:	40 e0       	ldi	r20, 0x00	; 0
 1c0:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DIO_write>
 1c4:	08 95       	ret

000001c6 <LED_toggle>:
}
void LED_toggle(uint8_t ledport, uint8_t ledpin) 
{
	DIO_toggle(ledport, ledpin);
 1c6:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <DIO_toggle>
 1ca:	08 95       	ret

000001cc <BUTTON_init>:
 */ 
#include "button.h"

void BUTTON_init(uint8_t buttonport, uint8_t buttonpin)
{
	DIO_init(buttonport, buttonpin, IN);
 1cc:	40 e0       	ldi	r20, 0x00	; 0
 1ce:	0e 94 ef 00 	call	0x1de	; 0x1de <DIO_init>
 1d2:	08 95       	ret

000001d4 <main>:


int main(void)
{
	//intialize
	APP_init();
 1d4:	0e 94 36 00 	call	0x6c	; 0x6c <APP_init>
	
	
	while(1)
	{
		APP_start();
 1d8:	0e 94 5c 00 	call	0xb8	; 0xb8 <APP_start>
 1dc:	fd cf       	rjmp	.-6      	; 0x1d8 <main+0x4>

000001de <DIO_init>:


//functions definitions
void DIO_init(uint8_t portNumber, uint8_t pinNumber, uint8_t direction)
{
	switch(portNumber)
 1de:	82 34       	cpi	r24, 0x42	; 66
 1e0:	31 f1       	breq	.+76     	; 0x22e <DIO_init+0x50>
 1e2:	18 f4       	brcc	.+6      	; 0x1ea <DIO_init+0xc>
 1e4:	81 34       	cpi	r24, 0x41	; 65
 1e6:	39 f0       	breq	.+14     	; 0x1f6 <DIO_init+0x18>
 1e8:	08 95       	ret
 1ea:	83 34       	cpi	r24, 0x43	; 67
 1ec:	e1 f1       	breq	.+120    	; 0x266 <DIO_init+0x88>
 1ee:	84 34       	cpi	r24, 0x44	; 68
 1f0:	09 f4       	brne	.+2      	; 0x1f4 <DIO_init+0x16>
 1f2:	54 c0       	rjmp	.+168    	; 0x29c <DIO_init+0xbe>
 1f4:	08 95       	ret
	{
		case PORT_A:
		       if (direction == IN)
 1f6:	41 11       	cpse	r20, r1
 1f8:	0c c0       	rjmp	.+24     	; 0x212 <DIO_init+0x34>
		       {
			        DDRA &= (~(1<<pinNumber)) ; //input
 1fa:	2a b3       	in	r18, 0x1a	; 26
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_init+0x28>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_init+0x24>
 20a:	80 95       	com	r24
 20c:	82 23       	and	r24, r18
 20e:	8a bb       	out	0x1a, r24	; 26
 210:	08 95       	ret
		       }
		       else if  (direction == OUT)
 212:	41 30       	cpi	r20, 0x01	; 1
 214:	09 f0       	breq	.+2      	; 0x218 <DIO_init+0x3a>
 216:	5c c0       	rjmp	.+184    	; 0x2d0 <DIO_init+0xf2>
		       {
		        	DDRA |= (1<<pinNumber) ; //output
 218:	2a b3       	in	r18, 0x1a	; 26
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_init+0x46>
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	6a 95       	dec	r22
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_init+0x42>
 228:	82 2b       	or	r24, r18
 22a:	8a bb       	out	0x1a, r24	; 26
 22c:	08 95       	ret
		       }
		break;
		case PORT_B:
		        if (direction == IN)
 22e:	41 11       	cpse	r20, r1
 230:	0c c0       	rjmp	.+24     	; 0x24a <DIO_init+0x6c>
		        {
			        DDRB &= (~(1<<pinNumber)) ; //input
 232:	27 b3       	in	r18, 0x17	; 23
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_init+0x60>
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	6a 95       	dec	r22
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_init+0x5c>
 242:	80 95       	com	r24
 244:	82 23       	and	r24, r18
 246:	87 bb       	out	0x17, r24	; 23
 248:	08 95       	ret
		        }
		        else if (direction == OUT)
 24a:	41 30       	cpi	r20, 0x01	; 1
 24c:	09 f0       	breq	.+2      	; 0x250 <DIO_init+0x72>
 24e:	40 c0       	rjmp	.+128    	; 0x2d0 <DIO_init+0xf2>
		        {
			        DDRB |= (1<<pinNumber) ; //output
 250:	27 b3       	in	r18, 0x17	; 23
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_init+0x7e>
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_init+0x7a>
 260:	82 2b       	or	r24, r18
 262:	87 bb       	out	0x17, r24	; 23
 264:	08 95       	ret
		        }
		break;
		case PORT_C:
		        if (direction == IN)
 266:	41 11       	cpse	r20, r1
 268:	0c c0       	rjmp	.+24     	; 0x282 <DIO_init+0xa4>
		        {
			        DDRC &= (~(1<<pinNumber)) ; //input
 26a:	24 b3       	in	r18, 0x14	; 20
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_init+0x98>
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	6a 95       	dec	r22
 278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_init+0x94>
 27a:	80 95       	com	r24
 27c:	82 23       	and	r24, r18
 27e:	84 bb       	out	0x14, r24	; 20
 280:	08 95       	ret
		        }
		        else if (direction == OUT)
 282:	41 30       	cpi	r20, 0x01	; 1
 284:	29 f5       	brne	.+74     	; 0x2d0 <DIO_init+0xf2>
		        {
			        DDRC |= (1<<pinNumber) ; //output
 286:	24 b3       	in	r18, 0x14	; 20
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	02 c0       	rjmp	.+4      	; 0x292 <DIO_init+0xb4>
 28e:	88 0f       	add	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	6a 95       	dec	r22
 294:	e2 f7       	brpl	.-8      	; 0x28e <DIO_init+0xb0>
 296:	82 2b       	or	r24, r18
 298:	84 bb       	out	0x14, r24	; 20
 29a:	08 95       	ret
		        }   
	    break;
        case PORT_D:
		        if (direction == IN)
 29c:	41 11       	cpse	r20, r1
 29e:	0c c0       	rjmp	.+24     	; 0x2b8 <DIO_init+0xda>
		        {
			        DDRD &= (~(1<<pinNumber)) ; //input
 2a0:	21 b3       	in	r18, 0x11	; 17
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <DIO_init+0xce>
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	6a 95       	dec	r22
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <DIO_init+0xca>
 2b0:	80 95       	com	r24
 2b2:	82 23       	and	r24, r18
 2b4:	81 bb       	out	0x11, r24	; 17
 2b6:	08 95       	ret
		        }
		        else if  (direction == OUT)
 2b8:	41 30       	cpi	r20, 0x01	; 1
 2ba:	51 f4       	brne	.+20     	; 0x2d0 <DIO_init+0xf2>
		        {
			        DDRD |= (1<<pinNumber) ; //output
 2bc:	21 b3       	in	r18, 0x11	; 17
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_init+0xea>
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_init+0xe6>
 2cc:	82 2b       	or	r24, r18
 2ce:	81 bb       	out	0x11, r24	; 17
 2d0:	08 95       	ret

000002d2 <DIO_write>:
		 	
	}
}
void DIO_write(uint8_t portNumber, uint8_t pinNumber, uint8_t value)
{
	switch(portNumber)
 2d2:	82 34       	cpi	r24, 0x42	; 66
 2d4:	31 f1       	breq	.+76     	; 0x322 <DIO_write+0x50>
 2d6:	18 f4       	brcc	.+6      	; 0x2de <DIO_write+0xc>
 2d8:	81 34       	cpi	r24, 0x41	; 65
 2da:	39 f0       	breq	.+14     	; 0x2ea <DIO_write+0x18>
 2dc:	08 95       	ret
 2de:	83 34       	cpi	r24, 0x43	; 67
 2e0:	e1 f1       	breq	.+120    	; 0x35a <DIO_write+0x88>
 2e2:	84 34       	cpi	r24, 0x44	; 68
 2e4:	09 f4       	brne	.+2      	; 0x2e8 <DIO_write+0x16>
 2e6:	54 c0       	rjmp	.+168    	; 0x390 <DIO_write+0xbe>
 2e8:	08 95       	ret
	{
		case PORT_A:
		if (value == LOW)
 2ea:	41 11       	cpse	r20, r1
 2ec:	0c c0       	rjmp	.+24     	; 0x306 <DIO_write+0x34>
		{
			PORTA &= (~(1<<pinNumber)) ; //write 0 as low
 2ee:	2b b3       	in	r18, 0x1b	; 27
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <DIO_write+0x28>
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	6a 95       	dec	r22
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <DIO_write+0x24>
 2fe:	80 95       	com	r24
 300:	82 23       	and	r24, r18
 302:	8b bb       	out	0x1b, r24	; 27
 304:	08 95       	ret
		}
		else if (value == HIGH)
 306:	41 30       	cpi	r20, 0x01	; 1
 308:	09 f0       	breq	.+2      	; 0x30c <DIO_write+0x3a>
 30a:	5c c0       	rjmp	.+184    	; 0x3c4 <DIO_write+0xf2>
		{
			PORTA |= (1<<pinNumber) ; //high
 30c:	2b b3       	in	r18, 0x1b	; 27
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	02 c0       	rjmp	.+4      	; 0x318 <DIO_write+0x46>
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	6a 95       	dec	r22
 31a:	e2 f7       	brpl	.-8      	; 0x314 <DIO_write+0x42>
 31c:	82 2b       	or	r24, r18
 31e:	8b bb       	out	0x1b, r24	; 27
 320:	08 95       	ret
		}
		break;
		case PORT_B:
		if (value == LOW)
 322:	41 11       	cpse	r20, r1
 324:	0c c0       	rjmp	.+24     	; 0x33e <DIO_write+0x6c>
		{
			PORTB &= (~(1<<pinNumber)) ; //low
 326:	28 b3       	in	r18, 0x18	; 24
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	02 c0       	rjmp	.+4      	; 0x332 <DIO_write+0x60>
 32e:	88 0f       	add	r24, r24
 330:	99 1f       	adc	r25, r25
 332:	6a 95       	dec	r22
 334:	e2 f7       	brpl	.-8      	; 0x32e <DIO_write+0x5c>
 336:	80 95       	com	r24
 338:	82 23       	and	r24, r18
 33a:	88 bb       	out	0x18, r24	; 24
 33c:	08 95       	ret
		}
		else if (value == HIGH)
 33e:	41 30       	cpi	r20, 0x01	; 1
 340:	09 f0       	breq	.+2      	; 0x344 <DIO_write+0x72>
 342:	40 c0       	rjmp	.+128    	; 0x3c4 <DIO_write+0xf2>
		{
			PORTB |= (1<<pinNumber) ; //high
 344:	28 b3       	in	r18, 0x18	; 24
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	02 c0       	rjmp	.+4      	; 0x350 <DIO_write+0x7e>
 34c:	88 0f       	add	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	6a 95       	dec	r22
 352:	e2 f7       	brpl	.-8      	; 0x34c <DIO_write+0x7a>
 354:	82 2b       	or	r24, r18
 356:	88 bb       	out	0x18, r24	; 24
 358:	08 95       	ret
		}
		break;
		case PORT_C:
		if (value == LOW)
 35a:	41 11       	cpse	r20, r1
 35c:	0c c0       	rjmp	.+24     	; 0x376 <DIO_write+0xa4>
		{
			PORTC &= (~(1<<pinNumber)) ; //low
 35e:	25 b3       	in	r18, 0x15	; 21
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	02 c0       	rjmp	.+4      	; 0x36a <DIO_write+0x98>
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	6a 95       	dec	r22
 36c:	e2 f7       	brpl	.-8      	; 0x366 <DIO_write+0x94>
 36e:	80 95       	com	r24
 370:	82 23       	and	r24, r18
 372:	85 bb       	out	0x15, r24	; 21
 374:	08 95       	ret
		}
		else if (value == HIGH)
 376:	41 30       	cpi	r20, 0x01	; 1
 378:	29 f5       	brne	.+74     	; 0x3c4 <DIO_write+0xf2>
		{
			PORTC |= (1<<pinNumber) ; //high
 37a:	25 b3       	in	r18, 0x15	; 21
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	02 c0       	rjmp	.+4      	; 0x386 <DIO_write+0xb4>
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	6a 95       	dec	r22
 388:	e2 f7       	brpl	.-8      	; 0x382 <DIO_write+0xb0>
 38a:	82 2b       	or	r24, r18
 38c:	85 bb       	out	0x15, r24	; 21
 38e:	08 95       	ret
		}
		break;
		case PORT_D:
		if (value == LOW)
 390:	41 11       	cpse	r20, r1
 392:	0c c0       	rjmp	.+24     	; 0x3ac <DIO_write+0xda>
		{
			PORTD &= (~(1<<pinNumber)) ; //low
 394:	22 b3       	in	r18, 0x12	; 18
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <DIO_write+0xce>
 39c:	88 0f       	add	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	6a 95       	dec	r22
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <DIO_write+0xca>
 3a4:	80 95       	com	r24
 3a6:	82 23       	and	r24, r18
 3a8:	82 bb       	out	0x12, r24	; 18
 3aa:	08 95       	ret
		}
		else if (value == HIGH)
 3ac:	41 30       	cpi	r20, 0x01	; 1
 3ae:	51 f4       	brne	.+20     	; 0x3c4 <DIO_write+0xf2>
		{
			PORTD |= (1<<pinNumber) ; //high
 3b0:	22 b3       	in	r18, 0x12	; 18
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <DIO_write+0xea>
 3b8:	88 0f       	add	r24, r24
 3ba:	99 1f       	adc	r25, r25
 3bc:	6a 95       	dec	r22
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <DIO_write+0xe6>
 3c0:	82 2b       	or	r24, r18
 3c2:	82 bb       	out	0x12, r24	; 18
 3c4:	08 95       	ret

000003c6 <DIO_toggle>:
	}
	return 0;
}
void DIO_toggle(uint8_t portNumber, uint8_t pinNumber)
{
	switch(portNumber)
 3c6:	82 34       	cpi	r24, 0x42	; 66
 3c8:	a1 f0       	breq	.+40     	; 0x3f2 <DIO_toggle+0x2c>
 3ca:	18 f4       	brcc	.+6      	; 0x3d2 <DIO_toggle+0xc>
 3cc:	81 34       	cpi	r24, 0x41	; 65
 3ce:	31 f0       	breq	.+12     	; 0x3dc <DIO_toggle+0x16>
 3d0:	08 95       	ret
 3d2:	83 34       	cpi	r24, 0x43	; 67
 3d4:	c9 f0       	breq	.+50     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3d6:	84 34       	cpi	r24, 0x44	; 68
 3d8:	11 f1       	breq	.+68     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 3da:	08 95       	ret
	{
		case PORT_A:
			PORTA ^= (1<<pinNumber) ; //toggle
 3dc:	2b b3       	in	r18, 0x1b	; 27
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_toggle+0x22>
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	6a 95       	dec	r22
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_toggle+0x1e>
 3ec:	82 27       	eor	r24, r18
 3ee:	8b bb       	out	0x1b, r24	; 27
		    break;
 3f0:	08 95       	ret
		case PORT_B:
		    PORTB ^= (1<<pinNumber) ; //toggle
 3f2:	28 b3       	in	r18, 0x18	; 24
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <DIO_toggle+0x38>
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	6a 95       	dec	r22
 400:	e2 f7       	brpl	.-8      	; 0x3fa <DIO_toggle+0x34>
 402:	82 27       	eor	r24, r18
 404:	88 bb       	out	0x18, r24	; 24
		    break;
 406:	08 95       	ret
		case PORT_C:
		    PORTC ^= (1<<pinNumber) ; //toggle
 408:	25 b3       	in	r18, 0x15	; 21
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	02 c0       	rjmp	.+4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 410:	88 0f       	add	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	6a 95       	dec	r22
 416:	e2 f7       	brpl	.-8      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 418:	82 27       	eor	r24, r18
 41a:	85 bb       	out	0x15, r24	; 21
		    break;
 41c:	08 95       	ret
		case PORT_D:
		    PORTD ^= (1<<pinNumber) ; //toggle
 41e:	22 b3       	in	r18, 0x12	; 18
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	02 c0       	rjmp	.+4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	6a 95       	dec	r22
 42c:	e2 f7       	brpl	.-8      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 42e:	82 27       	eor	r24, r18
 430:	82 bb       	out	0x12, r24	; 18
 432:	08 95       	ret

00000434 <TIMER_init>:
 */ 
#include "timer.h"
#include <math.h>
void TIMER_init()
{
	TCCR0 = 0x00; //normal mode
 434:	13 be       	out	0x33, r1	; 51
	TCNT0 =0x00;
 436:	12 be       	out	0x32, r1	; 50
 438:	08 95       	ret

0000043a <TIMER_delay>:
	//TIMSK |=(1<<0);
	
}

void TIMER_delay(uint16_t millisecond)
{
 43a:	cf 92       	push	r12
 43c:	df 92       	push	r13
 43e:	ef 92       	push	r14
 440:	ff 92       	push	r15
 442:	0f 93       	push	r16
 444:	1f 93       	push	r17
 446:	cf 93       	push	r28
 448:	df 93       	push	r29
 44a:	00 d0       	rcall	.+0      	; 0x44c <TIMER_delay+0x12>
 44c:	00 d0       	rcall	.+0      	; 0x44e <TIMER_delay+0x14>
 44e:	cd b7       	in	r28, 0x3d	; 61
 450:	de b7       	in	r29, 0x3e	; 62
 452:	8c 01       	movw	r16, r24
	uint16_t Timer_initialvalue;
	volatile uint16_t Noverflow; // as for 5 sec will be about 19500 Noverflow
	volatile uint32_t overflowcounter=0;
 454:	1c 82       	std	Y+4, r1	; 0x04
 456:	1b 82       	std	Y+3, r1	; 0x03
	//default for Prescaler=1
	//at 1MHz 
	T_tick=256.0/1000.0; //ms // T_tick=Prescaler/Fcpu  
    Tmaxdelay=56.536; //ms // Tmaxdelay=2^8*T_tick =256.0*256.0/1000.0
	
	if(millisecond<Tmaxdelay)
 458:	bc 01       	movw	r22, r24
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__floatunsisf>
 462:	6b 01       	movw	r12, r22
 464:	7c 01       	movw	r14, r24
 466:	2d ed       	ldi	r18, 0xDD	; 221
 468:	34 e2       	ldi	r19, 0x24	; 36
 46a:	42 e6       	ldi	r20, 0x62	; 98
 46c:	52 e4       	ldi	r21, 0x42	; 66
 46e:	0e 94 30 03 	call	0x660	; 0x660 <__cmpsf2>
 472:	88 23       	and	r24, r24
 474:	ac f4       	brge	.+42     	; 0x4a0 <TIMER_delay+0x66>
	{
		Timer_initialvalue=(Tmaxdelay-millisecond)/T_tick;
 476:	a7 01       	movw	r20, r14
 478:	96 01       	movw	r18, r12
 47a:	6d ed       	ldi	r22, 0xDD	; 221
 47c:	74 e2       	ldi	r23, 0x24	; 36
 47e:	82 e6       	ldi	r24, 0x62	; 98
 480:	92 e4       	ldi	r25, 0x42	; 66
 482:	0e 94 ac 02 	call	0x558	; 0x558 <__subsf3>
 486:	2f e6       	ldi	r18, 0x6F	; 111
 488:	32 e1       	ldi	r19, 0x12	; 18
 48a:	43 e8       	ldi	r20, 0x83	; 131
 48c:	5e e3       	ldi	r21, 0x3E	; 62
 48e:	0e 94 35 03 	call	0x66a	; 0x66a <__divsf3>
 492:	0e 94 a7 03 	call	0x74e	; 0x74e <__fixunssfsi>
		Noverflow=1;
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	9a 83       	std	Y+2, r25	; 0x02
 49c:	89 83       	std	Y+1, r24	; 0x01
 49e:	37 c0       	rjmp	.+110    	; 0x50e <TIMER_delay+0xd4>
	}
	else if(millisecond==(int)Tmaxdelay)
 4a0:	08 33       	cpi	r16, 0x38	; 56
 4a2:	11 05       	cpc	r17, r1
 4a4:	31 f4       	brne	.+12     	; 0x4b2 <TIMER_delay+0x78>
	{
		Timer_initialvalue=0;
		Noverflow=1;
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	9a 83       	std	Y+2, r25	; 0x02
 4ac:	89 83       	std	Y+1, r24	; 0x01
		Timer_initialvalue=(Tmaxdelay-millisecond)/T_tick;
		Noverflow=1;
	}
	else if(millisecond==(int)Tmaxdelay)
	{
		Timer_initialvalue=0;
 4ae:	60 e0       	ldi	r22, 0x00	; 0
 4b0:	2e c0       	rjmp	.+92     	; 0x50e <TIMER_delay+0xd4>
		Noverflow=1;
	}
	else 
	{
		Noverflow=ceil((double)millisecond/Tmaxdelay);
 4b2:	2d ed       	ldi	r18, 0xDD	; 221
 4b4:	34 e2       	ldi	r19, 0x24	; 36
 4b6:	42 e6       	ldi	r20, 0x62	; 98
 4b8:	52 e4       	ldi	r21, 0x42	; 66
 4ba:	c7 01       	movw	r24, r14
 4bc:	b6 01       	movw	r22, r12
 4be:	0e 94 35 03 	call	0x66a	; 0x66a <__divsf3>
 4c2:	0e 94 19 03 	call	0x632	; 0x632 <ceil>
 4c6:	0e 94 a7 03 	call	0x74e	; 0x74e <__fixunssfsi>
 4ca:	7a 83       	std	Y+2, r23	; 0x02
 4cc:	69 83       	std	Y+1, r22	; 0x01
		Timer_initialvalue=((1<<8)-((double)millisecond/T_tick)/Noverflow);
 4ce:	2f e6       	ldi	r18, 0x6F	; 111
 4d0:	32 e1       	ldi	r19, 0x12	; 18
 4d2:	43 e8       	ldi	r20, 0x83	; 131
 4d4:	5e e3       	ldi	r21, 0x3E	; 62
 4d6:	c7 01       	movw	r24, r14
 4d8:	b6 01       	movw	r22, r12
 4da:	0e 94 35 03 	call	0x66a	; 0x66a <__divsf3>
 4de:	6b 01       	movw	r12, r22
 4e0:	7c 01       	movw	r14, r24
 4e2:	69 81       	ldd	r22, Y+1	; 0x01
 4e4:	7a 81       	ldd	r23, Y+2	; 0x02
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__floatunsisf>
 4ee:	9b 01       	movw	r18, r22
 4f0:	ac 01       	movw	r20, r24
 4f2:	c7 01       	movw	r24, r14
 4f4:	b6 01       	movw	r22, r12
 4f6:	0e 94 35 03 	call	0x66a	; 0x66a <__divsf3>
 4fa:	9b 01       	movw	r18, r22
 4fc:	ac 01       	movw	r20, r24
 4fe:	60 e0       	ldi	r22, 0x00	; 0
 500:	70 e0       	ldi	r23, 0x00	; 0
 502:	80 e8       	ldi	r24, 0x80	; 128
 504:	93 e4       	ldi	r25, 0x43	; 67
 506:	0e 94 ac 02 	call	0x558	; 0x558 <__subsf3>
 50a:	0e 94 a7 03 	call	0x74e	; 0x74e <__fixunssfsi>
	}
	TCNT0 = Timer_initialvalue;
 50e:	62 bf       	out	0x32, r22	; 50
	TCCR0 |=(1<<2); //select 256prescaler
 510:	83 b7       	in	r24, 0x33	; 51
 512:	84 60       	ori	r24, 0x04	; 4
 514:	83 bf       	out	0x33, r24	; 51
	//TIMSK |=(1<<0); //overflow inerrupt enable
	
	while(overflowcounter<Noverflow)
 516:	0b c0       	rjmp	.+22     	; 0x52e <TIMER_delay+0xf4>
	{
		while((TIFR&(1<<0)>>0) ==0); //busy wait
 518:	08 b6       	in	r0, 0x38	; 56
 51a:	00 fe       	sbrs	r0, 0
 51c:	fd cf       	rjmp	.-6      	; 0x518 <TIMER_delay+0xde>
		TIFR |=(1<<0); //clear flag overflow as data sheet when set to 1
 51e:	88 b7       	in	r24, 0x38	; 56
 520:	81 60       	ori	r24, 0x01	; 1
 522:	88 bf       	out	0x38, r24	; 56
		overflowcounter++; //increment counter
 524:	8b 81       	ldd	r24, Y+3	; 0x03
 526:	9c 81       	ldd	r25, Y+4	; 0x04
 528:	01 96       	adiw	r24, 0x01	; 1
 52a:	9c 83       	std	Y+4, r25	; 0x04
 52c:	8b 83       	std	Y+3, r24	; 0x03
	}
	TCNT0 = Timer_initialvalue;
	TCCR0 |=(1<<2); //select 256prescaler
	//TIMSK |=(1<<0); //overflow inerrupt enable
	
	while(overflowcounter<Noverflow)
 52e:	2b 81       	ldd	r18, Y+3	; 0x03
 530:	3c 81       	ldd	r19, Y+4	; 0x04
 532:	89 81       	ldd	r24, Y+1	; 0x01
 534:	9a 81       	ldd	r25, Y+2	; 0x02
 536:	28 17       	cp	r18, r24
 538:	39 07       	cpc	r19, r25
 53a:	70 f3       	brcs	.-36     	; 0x518 <TIMER_delay+0xde>
		overflowcounter++; //increment counter
		
	}
	
	
	TCCR0 = 0x00; //stop timer 
 53c:	13 be       	out	0x33, r1	; 51
	
}
 53e:	0f 90       	pop	r0
 540:	0f 90       	pop	r0
 542:	0f 90       	pop	r0
 544:	0f 90       	pop	r0
 546:	df 91       	pop	r29
 548:	cf 91       	pop	r28
 54a:	1f 91       	pop	r17
 54c:	0f 91       	pop	r16
 54e:	ff 90       	pop	r15
 550:	ef 90       	pop	r14
 552:	df 90       	pop	r13
 554:	cf 90       	pop	r12
 556:	08 95       	ret

00000558 <__subsf3>:
 558:	50 58       	subi	r21, 0x80	; 128

0000055a <__addsf3>:
 55a:	bb 27       	eor	r27, r27
 55c:	aa 27       	eor	r26, r26
 55e:	0e 94 c4 02 	call	0x588	; 0x588 <__addsf3x>
 562:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__fp_round>
 566:	0e 94 69 04 	call	0x8d2	; 0x8d2 <__fp_pscA>
 56a:	38 f0       	brcs	.+14     	; 0x57a <__addsf3+0x20>
 56c:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__fp_pscB>
 570:	20 f0       	brcs	.+8      	; 0x57a <__addsf3+0x20>
 572:	39 f4       	brne	.+14     	; 0x582 <__addsf3+0x28>
 574:	9f 3f       	cpi	r25, 0xFF	; 255
 576:	19 f4       	brne	.+6      	; 0x57e <__addsf3+0x24>
 578:	26 f4       	brtc	.+8      	; 0x582 <__addsf3+0x28>
 57a:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <__fp_nan>
 57e:	0e f4       	brtc	.+2      	; 0x582 <__addsf3+0x28>
 580:	e0 95       	com	r30
 582:	e7 fb       	bst	r30, 7
 584:	0c 94 37 04 	jmp	0x86e	; 0x86e <__fp_inf>

00000588 <__addsf3x>:
 588:	e9 2f       	mov	r30, r25
 58a:	0e 94 88 04 	call	0x910	; 0x910 <__fp_split3>
 58e:	58 f3       	brcs	.-42     	; 0x566 <__addsf3+0xc>
 590:	ba 17       	cp	r27, r26
 592:	62 07       	cpc	r22, r18
 594:	73 07       	cpc	r23, r19
 596:	84 07       	cpc	r24, r20
 598:	95 07       	cpc	r25, r21
 59a:	20 f0       	brcs	.+8      	; 0x5a4 <__addsf3x+0x1c>
 59c:	79 f4       	brne	.+30     	; 0x5bc <__addsf3x+0x34>
 59e:	a6 f5       	brtc	.+104    	; 0x608 <__addsf3x+0x80>
 5a0:	0c 94 c2 04 	jmp	0x984	; 0x984 <__fp_zero>
 5a4:	0e f4       	brtc	.+2      	; 0x5a8 <__addsf3x+0x20>
 5a6:	e0 95       	com	r30
 5a8:	0b 2e       	mov	r0, r27
 5aa:	ba 2f       	mov	r27, r26
 5ac:	a0 2d       	mov	r26, r0
 5ae:	0b 01       	movw	r0, r22
 5b0:	b9 01       	movw	r22, r18
 5b2:	90 01       	movw	r18, r0
 5b4:	0c 01       	movw	r0, r24
 5b6:	ca 01       	movw	r24, r20
 5b8:	a0 01       	movw	r20, r0
 5ba:	11 24       	eor	r1, r1
 5bc:	ff 27       	eor	r31, r31
 5be:	59 1b       	sub	r21, r25
 5c0:	99 f0       	breq	.+38     	; 0x5e8 <__addsf3x+0x60>
 5c2:	59 3f       	cpi	r21, 0xF9	; 249
 5c4:	50 f4       	brcc	.+20     	; 0x5da <__addsf3x+0x52>
 5c6:	50 3e       	cpi	r21, 0xE0	; 224
 5c8:	68 f1       	brcs	.+90     	; 0x624 <__addsf3x+0x9c>
 5ca:	1a 16       	cp	r1, r26
 5cc:	f0 40       	sbci	r31, 0x00	; 0
 5ce:	a2 2f       	mov	r26, r18
 5d0:	23 2f       	mov	r18, r19
 5d2:	34 2f       	mov	r19, r20
 5d4:	44 27       	eor	r20, r20
 5d6:	58 5f       	subi	r21, 0xF8	; 248
 5d8:	f3 cf       	rjmp	.-26     	; 0x5c0 <__addsf3x+0x38>
 5da:	46 95       	lsr	r20
 5dc:	37 95       	ror	r19
 5de:	27 95       	ror	r18
 5e0:	a7 95       	ror	r26
 5e2:	f0 40       	sbci	r31, 0x00	; 0
 5e4:	53 95       	inc	r21
 5e6:	c9 f7       	brne	.-14     	; 0x5da <__addsf3x+0x52>
 5e8:	7e f4       	brtc	.+30     	; 0x608 <__addsf3x+0x80>
 5ea:	1f 16       	cp	r1, r31
 5ec:	ba 0b       	sbc	r27, r26
 5ee:	62 0b       	sbc	r22, r18
 5f0:	73 0b       	sbc	r23, r19
 5f2:	84 0b       	sbc	r24, r20
 5f4:	ba f0       	brmi	.+46     	; 0x624 <__addsf3x+0x9c>
 5f6:	91 50       	subi	r25, 0x01	; 1
 5f8:	a1 f0       	breq	.+40     	; 0x622 <__addsf3x+0x9a>
 5fa:	ff 0f       	add	r31, r31
 5fc:	bb 1f       	adc	r27, r27
 5fe:	66 1f       	adc	r22, r22
 600:	77 1f       	adc	r23, r23
 602:	88 1f       	adc	r24, r24
 604:	c2 f7       	brpl	.-16     	; 0x5f6 <__addsf3x+0x6e>
 606:	0e c0       	rjmp	.+28     	; 0x624 <__addsf3x+0x9c>
 608:	ba 0f       	add	r27, r26
 60a:	62 1f       	adc	r22, r18
 60c:	73 1f       	adc	r23, r19
 60e:	84 1f       	adc	r24, r20
 610:	48 f4       	brcc	.+18     	; 0x624 <__addsf3x+0x9c>
 612:	87 95       	ror	r24
 614:	77 95       	ror	r23
 616:	67 95       	ror	r22
 618:	b7 95       	ror	r27
 61a:	f7 95       	ror	r31
 61c:	9e 3f       	cpi	r25, 0xFE	; 254
 61e:	08 f0       	brcs	.+2      	; 0x622 <__addsf3x+0x9a>
 620:	b0 cf       	rjmp	.-160    	; 0x582 <__addsf3+0x28>
 622:	93 95       	inc	r25
 624:	88 0f       	add	r24, r24
 626:	08 f0       	brcs	.+2      	; 0x62a <__addsf3x+0xa2>
 628:	99 27       	eor	r25, r25
 62a:	ee 0f       	add	r30, r30
 62c:	97 95       	ror	r25
 62e:	87 95       	ror	r24
 630:	08 95       	ret

00000632 <ceil>:
 632:	0e 94 aa 04 	call	0x954	; 0x954 <__fp_trunc>
 636:	90 f0       	brcs	.+36     	; 0x65c <ceil+0x2a>
 638:	9f 37       	cpi	r25, 0x7F	; 127
 63a:	48 f4       	brcc	.+18     	; 0x64e <ceil+0x1c>
 63c:	91 11       	cpse	r25, r1
 63e:	16 f4       	brtc	.+4      	; 0x644 <ceil+0x12>
 640:	0c 94 c3 04 	jmp	0x986	; 0x986 <__fp_szero>
 644:	60 e0       	ldi	r22, 0x00	; 0
 646:	70 e0       	ldi	r23, 0x00	; 0
 648:	80 e8       	ldi	r24, 0x80	; 128
 64a:	9f e3       	ldi	r25, 0x3F	; 63
 64c:	08 95       	ret
 64e:	26 f0       	brts	.+8      	; 0x658 <ceil+0x26>
 650:	1b 16       	cp	r1, r27
 652:	61 1d       	adc	r22, r1
 654:	71 1d       	adc	r23, r1
 656:	81 1d       	adc	r24, r1
 658:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__fp_mintl>
 65c:	0c 94 58 04 	jmp	0x8b0	; 0x8b0 <__fp_mpack>

00000660 <__cmpsf2>:
 660:	0e 94 13 04 	call	0x826	; 0x826 <__fp_cmp>
 664:	08 f4       	brcc	.+2      	; 0x668 <__cmpsf2+0x8>
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	08 95       	ret

0000066a <__divsf3>:
 66a:	0e 94 49 03 	call	0x692	; 0x692 <__divsf3x>
 66e:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__fp_round>
 672:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__fp_pscB>
 676:	58 f0       	brcs	.+22     	; 0x68e <__divsf3+0x24>
 678:	0e 94 69 04 	call	0x8d2	; 0x8d2 <__fp_pscA>
 67c:	40 f0       	brcs	.+16     	; 0x68e <__divsf3+0x24>
 67e:	29 f4       	brne	.+10     	; 0x68a <__divsf3+0x20>
 680:	5f 3f       	cpi	r21, 0xFF	; 255
 682:	29 f0       	breq	.+10     	; 0x68e <__divsf3+0x24>
 684:	0c 94 37 04 	jmp	0x86e	; 0x86e <__fp_inf>
 688:	51 11       	cpse	r21, r1
 68a:	0c 94 c3 04 	jmp	0x986	; 0x986 <__fp_szero>
 68e:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <__fp_nan>

00000692 <__divsf3x>:
 692:	0e 94 88 04 	call	0x910	; 0x910 <__fp_split3>
 696:	68 f3       	brcs	.-38     	; 0x672 <__divsf3+0x8>

00000698 <__divsf3_pse>:
 698:	99 23       	and	r25, r25
 69a:	b1 f3       	breq	.-20     	; 0x688 <__divsf3+0x1e>
 69c:	55 23       	and	r21, r21
 69e:	91 f3       	breq	.-28     	; 0x684 <__divsf3+0x1a>
 6a0:	95 1b       	sub	r25, r21
 6a2:	55 0b       	sbc	r21, r21
 6a4:	bb 27       	eor	r27, r27
 6a6:	aa 27       	eor	r26, r26
 6a8:	62 17       	cp	r22, r18
 6aa:	73 07       	cpc	r23, r19
 6ac:	84 07       	cpc	r24, r20
 6ae:	38 f0       	brcs	.+14     	; 0x6be <__divsf3_pse+0x26>
 6b0:	9f 5f       	subi	r25, 0xFF	; 255
 6b2:	5f 4f       	sbci	r21, 0xFF	; 255
 6b4:	22 0f       	add	r18, r18
 6b6:	33 1f       	adc	r19, r19
 6b8:	44 1f       	adc	r20, r20
 6ba:	aa 1f       	adc	r26, r26
 6bc:	a9 f3       	breq	.-22     	; 0x6a8 <__divsf3_pse+0x10>
 6be:	35 d0       	rcall	.+106    	; 0x72a <__divsf3_pse+0x92>
 6c0:	0e 2e       	mov	r0, r30
 6c2:	3a f0       	brmi	.+14     	; 0x6d2 <__divsf3_pse+0x3a>
 6c4:	e0 e8       	ldi	r30, 0x80	; 128
 6c6:	32 d0       	rcall	.+100    	; 0x72c <__divsf3_pse+0x94>
 6c8:	91 50       	subi	r25, 0x01	; 1
 6ca:	50 40       	sbci	r21, 0x00	; 0
 6cc:	e6 95       	lsr	r30
 6ce:	00 1c       	adc	r0, r0
 6d0:	ca f7       	brpl	.-14     	; 0x6c4 <__divsf3_pse+0x2c>
 6d2:	2b d0       	rcall	.+86     	; 0x72a <__divsf3_pse+0x92>
 6d4:	fe 2f       	mov	r31, r30
 6d6:	29 d0       	rcall	.+82     	; 0x72a <__divsf3_pse+0x92>
 6d8:	66 0f       	add	r22, r22
 6da:	77 1f       	adc	r23, r23
 6dc:	88 1f       	adc	r24, r24
 6de:	bb 1f       	adc	r27, r27
 6e0:	26 17       	cp	r18, r22
 6e2:	37 07       	cpc	r19, r23
 6e4:	48 07       	cpc	r20, r24
 6e6:	ab 07       	cpc	r26, r27
 6e8:	b0 e8       	ldi	r27, 0x80	; 128
 6ea:	09 f0       	breq	.+2      	; 0x6ee <__divsf3_pse+0x56>
 6ec:	bb 0b       	sbc	r27, r27
 6ee:	80 2d       	mov	r24, r0
 6f0:	bf 01       	movw	r22, r30
 6f2:	ff 27       	eor	r31, r31
 6f4:	93 58       	subi	r25, 0x83	; 131
 6f6:	5f 4f       	sbci	r21, 0xFF	; 255
 6f8:	3a f0       	brmi	.+14     	; 0x708 <__divsf3_pse+0x70>
 6fa:	9e 3f       	cpi	r25, 0xFE	; 254
 6fc:	51 05       	cpc	r21, r1
 6fe:	78 f0       	brcs	.+30     	; 0x71e <__divsf3_pse+0x86>
 700:	0c 94 37 04 	jmp	0x86e	; 0x86e <__fp_inf>
 704:	0c 94 c3 04 	jmp	0x986	; 0x986 <__fp_szero>
 708:	5f 3f       	cpi	r21, 0xFF	; 255
 70a:	e4 f3       	brlt	.-8      	; 0x704 <__divsf3_pse+0x6c>
 70c:	98 3e       	cpi	r25, 0xE8	; 232
 70e:	d4 f3       	brlt	.-12     	; 0x704 <__divsf3_pse+0x6c>
 710:	86 95       	lsr	r24
 712:	77 95       	ror	r23
 714:	67 95       	ror	r22
 716:	b7 95       	ror	r27
 718:	f7 95       	ror	r31
 71a:	9f 5f       	subi	r25, 0xFF	; 255
 71c:	c9 f7       	brne	.-14     	; 0x710 <__divsf3_pse+0x78>
 71e:	88 0f       	add	r24, r24
 720:	91 1d       	adc	r25, r1
 722:	96 95       	lsr	r25
 724:	87 95       	ror	r24
 726:	97 f9       	bld	r25, 7
 728:	08 95       	ret
 72a:	e1 e0       	ldi	r30, 0x01	; 1
 72c:	66 0f       	add	r22, r22
 72e:	77 1f       	adc	r23, r23
 730:	88 1f       	adc	r24, r24
 732:	bb 1f       	adc	r27, r27
 734:	62 17       	cp	r22, r18
 736:	73 07       	cpc	r23, r19
 738:	84 07       	cpc	r24, r20
 73a:	ba 07       	cpc	r27, r26
 73c:	20 f0       	brcs	.+8      	; 0x746 <__divsf3_pse+0xae>
 73e:	62 1b       	sub	r22, r18
 740:	73 0b       	sbc	r23, r19
 742:	84 0b       	sbc	r24, r20
 744:	ba 0b       	sbc	r27, r26
 746:	ee 1f       	adc	r30, r30
 748:	88 f7       	brcc	.-30     	; 0x72c <__divsf3_pse+0x94>
 74a:	e0 95       	com	r30
 74c:	08 95       	ret

0000074e <__fixunssfsi>:
 74e:	0e 94 90 04 	call	0x920	; 0x920 <__fp_splitA>
 752:	88 f0       	brcs	.+34     	; 0x776 <__fixunssfsi+0x28>
 754:	9f 57       	subi	r25, 0x7F	; 127
 756:	98 f0       	brcs	.+38     	; 0x77e <__fixunssfsi+0x30>
 758:	b9 2f       	mov	r27, r25
 75a:	99 27       	eor	r25, r25
 75c:	b7 51       	subi	r27, 0x17	; 23
 75e:	b0 f0       	brcs	.+44     	; 0x78c <__fixunssfsi+0x3e>
 760:	e1 f0       	breq	.+56     	; 0x79a <__fixunssfsi+0x4c>
 762:	66 0f       	add	r22, r22
 764:	77 1f       	adc	r23, r23
 766:	88 1f       	adc	r24, r24
 768:	99 1f       	adc	r25, r25
 76a:	1a f0       	brmi	.+6      	; 0x772 <__fixunssfsi+0x24>
 76c:	ba 95       	dec	r27
 76e:	c9 f7       	brne	.-14     	; 0x762 <__fixunssfsi+0x14>
 770:	14 c0       	rjmp	.+40     	; 0x79a <__fixunssfsi+0x4c>
 772:	b1 30       	cpi	r27, 0x01	; 1
 774:	91 f0       	breq	.+36     	; 0x79a <__fixunssfsi+0x4c>
 776:	0e 94 c2 04 	call	0x984	; 0x984 <__fp_zero>
 77a:	b1 e0       	ldi	r27, 0x01	; 1
 77c:	08 95       	ret
 77e:	0c 94 c2 04 	jmp	0x984	; 0x984 <__fp_zero>
 782:	67 2f       	mov	r22, r23
 784:	78 2f       	mov	r23, r24
 786:	88 27       	eor	r24, r24
 788:	b8 5f       	subi	r27, 0xF8	; 248
 78a:	39 f0       	breq	.+14     	; 0x79a <__fixunssfsi+0x4c>
 78c:	b9 3f       	cpi	r27, 0xF9	; 249
 78e:	cc f3       	brlt	.-14     	; 0x782 <__fixunssfsi+0x34>
 790:	86 95       	lsr	r24
 792:	77 95       	ror	r23
 794:	67 95       	ror	r22
 796:	b3 95       	inc	r27
 798:	d9 f7       	brne	.-10     	; 0x790 <__fixunssfsi+0x42>
 79a:	3e f4       	brtc	.+14     	; 0x7aa <__fixunssfsi+0x5c>
 79c:	90 95       	com	r25
 79e:	80 95       	com	r24
 7a0:	70 95       	com	r23
 7a2:	61 95       	neg	r22
 7a4:	7f 4f       	sbci	r23, 0xFF	; 255
 7a6:	8f 4f       	sbci	r24, 0xFF	; 255
 7a8:	9f 4f       	sbci	r25, 0xFF	; 255
 7aa:	08 95       	ret

000007ac <__floatunsisf>:
 7ac:	e8 94       	clt
 7ae:	09 c0       	rjmp	.+18     	; 0x7c2 <__floatsisf+0x12>

000007b0 <__floatsisf>:
 7b0:	97 fb       	bst	r25, 7
 7b2:	3e f4       	brtc	.+14     	; 0x7c2 <__floatsisf+0x12>
 7b4:	90 95       	com	r25
 7b6:	80 95       	com	r24
 7b8:	70 95       	com	r23
 7ba:	61 95       	neg	r22
 7bc:	7f 4f       	sbci	r23, 0xFF	; 255
 7be:	8f 4f       	sbci	r24, 0xFF	; 255
 7c0:	9f 4f       	sbci	r25, 0xFF	; 255
 7c2:	99 23       	and	r25, r25
 7c4:	a9 f0       	breq	.+42     	; 0x7f0 <__floatsisf+0x40>
 7c6:	f9 2f       	mov	r31, r25
 7c8:	96 e9       	ldi	r25, 0x96	; 150
 7ca:	bb 27       	eor	r27, r27
 7cc:	93 95       	inc	r25
 7ce:	f6 95       	lsr	r31
 7d0:	87 95       	ror	r24
 7d2:	77 95       	ror	r23
 7d4:	67 95       	ror	r22
 7d6:	b7 95       	ror	r27
 7d8:	f1 11       	cpse	r31, r1
 7da:	f8 cf       	rjmp	.-16     	; 0x7cc <__floatsisf+0x1c>
 7dc:	fa f4       	brpl	.+62     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 7de:	bb 0f       	add	r27, r27
 7e0:	11 f4       	brne	.+4      	; 0x7e6 <__floatsisf+0x36>
 7e2:	60 ff       	sbrs	r22, 0
 7e4:	1b c0       	rjmp	.+54     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 7e6:	6f 5f       	subi	r22, 0xFF	; 255
 7e8:	7f 4f       	sbci	r23, 0xFF	; 255
 7ea:	8f 4f       	sbci	r24, 0xFF	; 255
 7ec:	9f 4f       	sbci	r25, 0xFF	; 255
 7ee:	16 c0       	rjmp	.+44     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 7f0:	88 23       	and	r24, r24
 7f2:	11 f0       	breq	.+4      	; 0x7f8 <__floatsisf+0x48>
 7f4:	96 e9       	ldi	r25, 0x96	; 150
 7f6:	11 c0       	rjmp	.+34     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 7f8:	77 23       	and	r23, r23
 7fa:	21 f0       	breq	.+8      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7fc:	9e e8       	ldi	r25, 0x8E	; 142
 7fe:	87 2f       	mov	r24, r23
 800:	76 2f       	mov	r23, r22
 802:	05 c0       	rjmp	.+10     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 804:	66 23       	and	r22, r22
 806:	71 f0       	breq	.+28     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 808:	96 e8       	ldi	r25, 0x86	; 134
 80a:	86 2f       	mov	r24, r22
 80c:	70 e0       	ldi	r23, 0x00	; 0
 80e:	60 e0       	ldi	r22, 0x00	; 0
 810:	2a f0       	brmi	.+10     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 812:	9a 95       	dec	r25
 814:	66 0f       	add	r22, r22
 816:	77 1f       	adc	r23, r23
 818:	88 1f       	adc	r24, r24
 81a:	da f7       	brpl	.-10     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 81c:	88 0f       	add	r24, r24
 81e:	96 95       	lsr	r25
 820:	87 95       	ror	r24
 822:	97 f9       	bld	r25, 7
 824:	08 95       	ret

00000826 <__fp_cmp>:
 826:	99 0f       	add	r25, r25
 828:	00 08       	sbc	r0, r0
 82a:	55 0f       	add	r21, r21
 82c:	aa 0b       	sbc	r26, r26
 82e:	e0 e8       	ldi	r30, 0x80	; 128
 830:	fe ef       	ldi	r31, 0xFE	; 254
 832:	16 16       	cp	r1, r22
 834:	17 06       	cpc	r1, r23
 836:	e8 07       	cpc	r30, r24
 838:	f9 07       	cpc	r31, r25
 83a:	c0 f0       	brcs	.+48     	; 0x86c <__stack+0xd>
 83c:	12 16       	cp	r1, r18
 83e:	13 06       	cpc	r1, r19
 840:	e4 07       	cpc	r30, r20
 842:	f5 07       	cpc	r31, r21
 844:	98 f0       	brcs	.+38     	; 0x86c <__stack+0xd>
 846:	62 1b       	sub	r22, r18
 848:	73 0b       	sbc	r23, r19
 84a:	84 0b       	sbc	r24, r20
 84c:	95 0b       	sbc	r25, r21
 84e:	39 f4       	brne	.+14     	; 0x85e <__fp_cmp+0x38>
 850:	0a 26       	eor	r0, r26
 852:	61 f0       	breq	.+24     	; 0x86c <__stack+0xd>
 854:	23 2b       	or	r18, r19
 856:	24 2b       	or	r18, r20
 858:	25 2b       	or	r18, r21
 85a:	21 f4       	brne	.+8      	; 0x864 <__stack+0x5>
 85c:	08 95       	ret
 85e:	0a 26       	eor	r0, r26
 860:	09 f4       	brne	.+2      	; 0x864 <__stack+0x5>
 862:	a1 40       	sbci	r26, 0x01	; 1
 864:	a6 95       	lsr	r26
 866:	8f ef       	ldi	r24, 0xFF	; 255
 868:	81 1d       	adc	r24, r1
 86a:	81 1d       	adc	r24, r1
 86c:	08 95       	ret

0000086e <__fp_inf>:
 86e:	97 f9       	bld	r25, 7
 870:	9f 67       	ori	r25, 0x7F	; 127
 872:	80 e8       	ldi	r24, 0x80	; 128
 874:	70 e0       	ldi	r23, 0x00	; 0
 876:	60 e0       	ldi	r22, 0x00	; 0
 878:	08 95       	ret

0000087a <__fp_mintl>:
 87a:	88 23       	and	r24, r24
 87c:	71 f4       	brne	.+28     	; 0x89a <__fp_mintl+0x20>
 87e:	77 23       	and	r23, r23
 880:	21 f0       	breq	.+8      	; 0x88a <__fp_mintl+0x10>
 882:	98 50       	subi	r25, 0x08	; 8
 884:	87 2b       	or	r24, r23
 886:	76 2f       	mov	r23, r22
 888:	07 c0       	rjmp	.+14     	; 0x898 <__fp_mintl+0x1e>
 88a:	66 23       	and	r22, r22
 88c:	11 f4       	brne	.+4      	; 0x892 <__fp_mintl+0x18>
 88e:	99 27       	eor	r25, r25
 890:	0d c0       	rjmp	.+26     	; 0x8ac <__fp_mintl+0x32>
 892:	90 51       	subi	r25, 0x10	; 16
 894:	86 2b       	or	r24, r22
 896:	70 e0       	ldi	r23, 0x00	; 0
 898:	60 e0       	ldi	r22, 0x00	; 0
 89a:	2a f0       	brmi	.+10     	; 0x8a6 <__fp_mintl+0x2c>
 89c:	9a 95       	dec	r25
 89e:	66 0f       	add	r22, r22
 8a0:	77 1f       	adc	r23, r23
 8a2:	88 1f       	adc	r24, r24
 8a4:	da f7       	brpl	.-10     	; 0x89c <__fp_mintl+0x22>
 8a6:	88 0f       	add	r24, r24
 8a8:	96 95       	lsr	r25
 8aa:	87 95       	ror	r24
 8ac:	97 f9       	bld	r25, 7
 8ae:	08 95       	ret

000008b0 <__fp_mpack>:
 8b0:	9f 3f       	cpi	r25, 0xFF	; 255
 8b2:	31 f0       	breq	.+12     	; 0x8c0 <__fp_mpack_finite+0xc>

000008b4 <__fp_mpack_finite>:
 8b4:	91 50       	subi	r25, 0x01	; 1
 8b6:	20 f4       	brcc	.+8      	; 0x8c0 <__fp_mpack_finite+0xc>
 8b8:	87 95       	ror	r24
 8ba:	77 95       	ror	r23
 8bc:	67 95       	ror	r22
 8be:	b7 95       	ror	r27
 8c0:	88 0f       	add	r24, r24
 8c2:	91 1d       	adc	r25, r1
 8c4:	96 95       	lsr	r25
 8c6:	87 95       	ror	r24
 8c8:	97 f9       	bld	r25, 7
 8ca:	08 95       	ret

000008cc <__fp_nan>:
 8cc:	9f ef       	ldi	r25, 0xFF	; 255
 8ce:	80 ec       	ldi	r24, 0xC0	; 192
 8d0:	08 95       	ret

000008d2 <__fp_pscA>:
 8d2:	00 24       	eor	r0, r0
 8d4:	0a 94       	dec	r0
 8d6:	16 16       	cp	r1, r22
 8d8:	17 06       	cpc	r1, r23
 8da:	18 06       	cpc	r1, r24
 8dc:	09 06       	cpc	r0, r25
 8de:	08 95       	ret

000008e0 <__fp_pscB>:
 8e0:	00 24       	eor	r0, r0
 8e2:	0a 94       	dec	r0
 8e4:	12 16       	cp	r1, r18
 8e6:	13 06       	cpc	r1, r19
 8e8:	14 06       	cpc	r1, r20
 8ea:	05 06       	cpc	r0, r21
 8ec:	08 95       	ret

000008ee <__fp_round>:
 8ee:	09 2e       	mov	r0, r25
 8f0:	03 94       	inc	r0
 8f2:	00 0c       	add	r0, r0
 8f4:	11 f4       	brne	.+4      	; 0x8fa <__fp_round+0xc>
 8f6:	88 23       	and	r24, r24
 8f8:	52 f0       	brmi	.+20     	; 0x90e <__fp_round+0x20>
 8fa:	bb 0f       	add	r27, r27
 8fc:	40 f4       	brcc	.+16     	; 0x90e <__fp_round+0x20>
 8fe:	bf 2b       	or	r27, r31
 900:	11 f4       	brne	.+4      	; 0x906 <__fp_round+0x18>
 902:	60 ff       	sbrs	r22, 0
 904:	04 c0       	rjmp	.+8      	; 0x90e <__fp_round+0x20>
 906:	6f 5f       	subi	r22, 0xFF	; 255
 908:	7f 4f       	sbci	r23, 0xFF	; 255
 90a:	8f 4f       	sbci	r24, 0xFF	; 255
 90c:	9f 4f       	sbci	r25, 0xFF	; 255
 90e:	08 95       	ret

00000910 <__fp_split3>:
 910:	57 fd       	sbrc	r21, 7
 912:	90 58       	subi	r25, 0x80	; 128
 914:	44 0f       	add	r20, r20
 916:	55 1f       	adc	r21, r21
 918:	59 f0       	breq	.+22     	; 0x930 <__fp_splitA+0x10>
 91a:	5f 3f       	cpi	r21, 0xFF	; 255
 91c:	71 f0       	breq	.+28     	; 0x93a <__fp_splitA+0x1a>
 91e:	47 95       	ror	r20

00000920 <__fp_splitA>:
 920:	88 0f       	add	r24, r24
 922:	97 fb       	bst	r25, 7
 924:	99 1f       	adc	r25, r25
 926:	61 f0       	breq	.+24     	; 0x940 <__fp_splitA+0x20>
 928:	9f 3f       	cpi	r25, 0xFF	; 255
 92a:	79 f0       	breq	.+30     	; 0x94a <__fp_splitA+0x2a>
 92c:	87 95       	ror	r24
 92e:	08 95       	ret
 930:	12 16       	cp	r1, r18
 932:	13 06       	cpc	r1, r19
 934:	14 06       	cpc	r1, r20
 936:	55 1f       	adc	r21, r21
 938:	f2 cf       	rjmp	.-28     	; 0x91e <__fp_split3+0xe>
 93a:	46 95       	lsr	r20
 93c:	f1 df       	rcall	.-30     	; 0x920 <__fp_splitA>
 93e:	08 c0       	rjmp	.+16     	; 0x950 <__fp_splitA+0x30>
 940:	16 16       	cp	r1, r22
 942:	17 06       	cpc	r1, r23
 944:	18 06       	cpc	r1, r24
 946:	99 1f       	adc	r25, r25
 948:	f1 cf       	rjmp	.-30     	; 0x92c <__fp_splitA+0xc>
 94a:	86 95       	lsr	r24
 94c:	71 05       	cpc	r23, r1
 94e:	61 05       	cpc	r22, r1
 950:	08 94       	sec
 952:	08 95       	ret

00000954 <__fp_trunc>:
 954:	0e 94 90 04 	call	0x920	; 0x920 <__fp_splitA>
 958:	a0 f0       	brcs	.+40     	; 0x982 <__fp_trunc+0x2e>
 95a:	be e7       	ldi	r27, 0x7E	; 126
 95c:	b9 17       	cp	r27, r25
 95e:	88 f4       	brcc	.+34     	; 0x982 <__fp_trunc+0x2e>
 960:	bb 27       	eor	r27, r27
 962:	9f 38       	cpi	r25, 0x8F	; 143
 964:	60 f4       	brcc	.+24     	; 0x97e <__fp_trunc+0x2a>
 966:	16 16       	cp	r1, r22
 968:	b1 1d       	adc	r27, r1
 96a:	67 2f       	mov	r22, r23
 96c:	78 2f       	mov	r23, r24
 96e:	88 27       	eor	r24, r24
 970:	98 5f       	subi	r25, 0xF8	; 248
 972:	f7 cf       	rjmp	.-18     	; 0x962 <__fp_trunc+0xe>
 974:	86 95       	lsr	r24
 976:	77 95       	ror	r23
 978:	67 95       	ror	r22
 97a:	b1 1d       	adc	r27, r1
 97c:	93 95       	inc	r25
 97e:	96 39       	cpi	r25, 0x96	; 150
 980:	c8 f3       	brcs	.-14     	; 0x974 <__fp_trunc+0x20>
 982:	08 95       	ret

00000984 <__fp_zero>:
 984:	e8 94       	clt

00000986 <__fp_szero>:
 986:	bb 27       	eor	r27, r27
 988:	66 27       	eor	r22, r22
 98a:	77 27       	eor	r23, r23
 98c:	cb 01       	movw	r24, r22
 98e:	97 f9       	bld	r25, 7
 990:	08 95       	ret

00000992 <_exit>:
 992:	f8 94       	cli

00000994 <__stop_program>:
 994:	ff cf       	rjmp	.-2      	; 0x994 <__stop_program>
